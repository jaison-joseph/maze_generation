

-O3  >  -Ofast

2.58: original

2:05 threadpool

<= 2:00 single instance of the RNG

1:50 inlines the mutation and crossover methods

1:17 no floating point division: updated rng generator bounds and adjusted probability calculation

at this point, -Ofast ~= -O3

1:14 gettting rid of 2d arrays for indices in pathfinder
    - it's called ~36 million times

-O2 performs better on M2
but -O3 with mcpu does best overall {-O2 | -O3: -mcpu=apple-m2 | N/A }
-funroll-loops doesn't do anything

~1:12:500 using pointers

[1:04 - 1:16] after passing refs to input for threads instead of any copying hahahah

try:
    -march=native
    -flto

# for debugging:
    -fno-omit-frame-pointer /
    -g // debug symbols

# go from nested vector of bools to single vector of ints:
we have:

bool[30][30]: 


we want it to be:
    1 row is 30 bits -> less than size of int
    so the bool[30][30] -> int[30]

    what would the transformation look like?
        (access)     bool[i][j] -> int[i] & 1 << (31-j)
        (set to 1)   bool[i][j] -> int[i] = int[i]  |  (1 << (31-j))
        (set to 0)   bool[i][j] -> int[i] = int[i]  & ~(1 << (31-j))
        (flip 10 01) bool[i][j] -> int[i] = int[i]  ^  (1 << (31-j))

using pprof:
/opt/homebrew/bin/pprof [options] <program> <profiles>
file:///private/tmp/pprof6563.3.svg

env CPUPROFILE=run5.prof ./foobar
pprof --text ./foobar run5.prof